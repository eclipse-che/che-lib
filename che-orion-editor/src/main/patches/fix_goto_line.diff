This patch replaces using browser's native prompt dialog by Che's dialog.
===================================================================
diff --git a/org/eclipse/che/orion/public/built-codeEdit/code_edit/built-codeEdit-amd.js b/org/eclipse/che/orion/public/built-codeEdit/code_edit/built-codeEdit-amd.js
--- a/org/eclipse/che/orion/public/built-codeEdit/code_edit/built-codeEdit-amd.js
+++ b/org/eclipse/che/orion/public/built-codeEdit/code_edit/built-codeEdit-amd.js
@@ -14044,20 +14044,44 @@
 					var line;
 					var editor = this.editor || that.editor;
 					var model = editor.getModel();
-					if (data.parameters && data.parameters.valueFor('line')) { //$NON-NLS-0$
-						line = data.parameters.valueFor('line'); //$NON-NLS-0$
-					} else if(!util.isElectron){
-						line = model.getLineAtOffset(editor.getCaretOffset());
-						line = prompt(messages.gotoLinePrompt, line + 1);
-						if (line) {
-							line = parseInt(line, 10);
-						}
-					}
-					if (line) {
-						editor.onGotoLine(line - 1, 0);
-					}
-				}
-			});
+                    if (data.parameters && data.parameters.valueFor('line')) { //$NON-NLS-0$
+                        line = data.parameters.valueFor('line'); //$NON-NLS-0$
+                        if (!line) return;
+                        editor.onGotoLine(line - 1, 0);
+                        return;
+                    }
+
+                    line = model.getLineAtOffset(editor.getCaretOffset());
+
+                    // try to use promptIDE(title, text, defaultValue, callback) function
+                    if (window["promptIDE"]) {
+                        window["promptIDE"](messages.gotoLineTooltip, messages.gotoLinePrompt, line + 1,
+                            function(value) {
+                                if (!value) return;
+                                if (value.indexOf(":") > 0) {
+                                    var values = value.split(":");
+                                    if (!values[0] || !values[1]) return;
+                                    values[0] = parseInt(values[0], 10);
+                                    values[1] = parseInt(values[1], 10);
+                                    if (!values[0] || !values[1]) return;
+                                    editor.onGotoLine(values[0] - 1, values[1] - 1, values[1] - 1);
+                                } else {
+                                    value = parseInt(value, 10);
+                                    if (!value) return;
+                                    editor.onGotoLine(value - 1, 0);
+                                }
+                            });
+                        return;
+                    }
+
+                    // use browser based
+                    line = prompt(messages.gotoLinePrompt, line + 1);
+                    if (!line) return;
+                    line = parseInt(line, 10);
+                    if (!line) return;
+                    editor.onGotoLine(line - 1, 0);
+                }
+            });
 			this.commandService.addCommand(gotoLineCommand);
 		},
 		_createFindCommnand: function() {
