This patch fixes bug related to linked mode.
===================================================================
diff --git a/org/eclipse/che/orion/public/built-codeEdit/code_edit/built-codeEdit-amd.js b/org/eclipse/che/orion/public/built-codeEdit/code_edit/built-codeEdit-amd.js
--- a/org/eclipse/che/orion/public/built-codeEdit/code_edit/built-codeEdit-amd.js
+++ b/org/eclipse/che/orion/public/built-codeEdit/code_edit/built-codeEdit-amd.js
@@ -33336,8 +33336,9 @@
 	'orion/editor/keyModes',
 	'orion/editor/annotations',
 	'orion/objects',
+    'orion/editor/eventTarget',
 	'orion/util'
-], function(messages, mKeyBinding, mKeyModes, mAnnotations, objects) {
+], function(messages, mKeyBinding, mKeyModes, mAnnotations, objects, mEventTarget) {

 	var exports = {};

@@ -33421,11 +33422,11 @@
 		this.linkedModeModel = null;

 		textView.setAction("linkedModeEnter", function() { //$NON-NLS-0$
-			this.exitLinkedMode(true);
+			this.exitLinkedMode(true, true);
 			return true;
 		}.bind(this));
 		textView.setAction("linkedModeCancel", function() { //$NON-NLS-0$
-			this.exitLinkedMode(true);
+			this.exitLinkedMode(false, false);
 			return true;
 		}.bind(this));
 		textView.setAction("linkedModeNextGroup", function() { //$NON-NLS-0$
@@ -33463,7 +33464,7 @@
 					changed = positionChanged.position;
 					if (changed === undefined || changed.model !== model) {
 						// The change has been done outside of the positions, exit the Linked Mode
-						this.exitLinkedMode(false);
+						this.exitLinkedMode(false, false);
 						model = this.linkedModeModel;
 					} else {
 						break;
@@ -33508,7 +33509,7 @@
 					changed = positionChanged.position;
 					if (changed === undefined || changed.model !== model) {
 						// The change has been done outside of the positions, exit the Linked Mode
-						this.exitLinkedMode(false);
+						this.exitLinkedMode(false, false);
 						model = this.linkedModeModel;
 					} else {
 						break;
@@ -33555,12 +33555,15 @@

                                // Cancel this modification and apply same modification to all positions in changing group
                                this.ignoreVerify = true;
+                var delta = 0;
                                for (i = sortedPositions.length - 1; i >= 0; i--) {
                                        pos = sortedPositions[i];
                                        if (pos.model === model && pos.group === changed.group) {
                                                this.editor.setText(evnt.text, pos.oldOffset + deltaStart , pos.oldOffset + deltaEnd, false);
+                        delta = pos.oldOffset <= evnt.start ? delta + changeCount : delta;
                                        }
                                }
+                this.editor.setCaretOffset(evnt.end + delta);
                                this.ignoreVerify = false;
                                evnt.text = null;
                                this._updateAnnotations(sortedPositions);
@@ -33640,10 +33641,11 @@
 		 * Exits Linked Mode. Optionally places the caret at linkedMode escapePosition.
 		 * @param {Boolean} [escapePosition=false] if true, place the caret at the  escape position.
 		 */
-		exitLinkedMode: function(escapePosition) {
+		exitLinkedMode: function(escapePosition, successful) {
 			if (!this.isActive()) {
 				return;
 			}
+            this.dispatchEvent({type:"LinkedModeExit", isSuccessful: successful});
 			if (this._compoundChange) {
 				this.endUndo();
 				this._compoundChange = null;
@@ -33889,6 +33891,7 @@
 			annotationModel.replaceAnnotations(remove, add);
 		}
 	});
+    mEventTarget.EventTarget.addMixin(LinkedMode.prototype);
 	exports.LinkedMode = LinkedMode;

 	return exports;
\ No newline at end of file
